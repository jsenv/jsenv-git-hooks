import { assert } from "@jsenv/assert"
import { installGitHooks } from "../../index.js"
import {
  resolveUrl,
  ensureEmptyDirectory,
  writeFile,
  readFile,
  readFileSystemNodePermissions,
  readFileSystemNodeStat,
} from "@jsenv/util"

const isWindows = process.platform === "win32"
const tempDirectoryUrl = import.meta.resolve("./temp/")
await ensureEmptyDirectory(tempDirectoryUrl)

// no hook file and hook script
{
  const packageJsonFileUrl = resolveUrl("package.json", tempDirectoryUrl)
  const preCommitHookFileUrl = resolveUrl(".git/hooks/pre-commit", tempDirectoryUrl)
  await writeFile(
    packageJsonFileUrl,
    JSON.stringify({
      scripts: {
        "git-hook-pre-commit": "node ./whatever.js",
      },
    }),
  )

  await installGitHooks({
    projectDirectoryUrl: tempDirectoryUrl,
    ci: false,
  })
  const actual = {
    precommitHookFileContent: await readFile(preCommitHookFileUrl),
    precommitHookFilePermissions: await readFileSystemNodePermissions(preCommitHookFileUrl),
  }
  const expected = {
    precommitHookFileContent: `#!/bin/sh
# Generated by @jsenv/git-hooks
node ./whatever.js`,
    precommitHookFilePermissions: isWindows
      ? actual.precommitHookFilePermissions
      : {
          owner: { read: true, write: true, execute: true },
          group: { read: true, write: false, execute: true },
          others: { read: true, write: false, execute: true },
        },
  }
  assert({ actual, expected })
  await ensureEmptyDirectory(tempDirectoryUrl)
}

// hook file owned by us and hook script
{
  const packageJsonFileUrl = resolveUrl("package.json", tempDirectoryUrl)
  const preCommitHookFileUrl = resolveUrl(".git/hooks/pre-commit", tempDirectoryUrl)
  await writeFile(
    packageJsonFileUrl,
    JSON.stringify({
      scripts: {
        "git-hook-pre-commit": "node ./override.js",
      },
    }),
  )
  await writeFile(
    preCommitHookFileUrl,
    `#!/bin/sh
# Generated by @jsenv/git-hooks
node ./existing.js`,
  )

  await installGitHooks({
    projectDirectoryUrl: tempDirectoryUrl,
    ci: false,
  })
  const actual = await readFile(preCommitHookFileUrl)
  const expected = `#!/bin/sh
# Generated by @jsenv/git-hooks
node ./override.js`
  assert({ actual, expected })
  await ensureEmptyDirectory(tempDirectoryUrl)
}

// hook file owned by us and no hook script
{
  const packageJsonFileUrl = resolveUrl("package.json", tempDirectoryUrl)
  const preCommitHookFileUrl = resolveUrl(".git/hooks/pre-commit", tempDirectoryUrl)
  const hookFileContent = `#!/bin/sh
# Generated by @jsenv/git-hooks
node ./existing.js`
  await writeFile(packageJsonFileUrl, JSON.stringify({}))
  await writeFile(preCommitHookFileUrl, hookFileContent)

  await installGitHooks({
    projectDirectoryUrl: tempDirectoryUrl,
    ci: false,
  })
  // hook file must be deleted
  const actual = await readFileSystemNodeStat(preCommitHookFileUrl, { nullIfNotFound: true })
  const expected = null
  assert({ actual, expected })
  await ensureEmptyDirectory(tempDirectoryUrl)
}

// hook file and hook script
{
  const packageJsonFileUrl = resolveUrl("package.json", tempDirectoryUrl)
  const preCommitHookFileUrl = resolveUrl(".git/hooks/pre-commit", tempDirectoryUrl)
  const hookFileContent = `#!/bin/sh`
  await writeFile(
    packageJsonFileUrl,
    JSON.stringify({
      scripts: {
        "git-hook-pre-commit": "node ./override.js",
      },
    }),
  )
  await writeFile(preCommitHookFileUrl, hookFileContent)

  await installGitHooks({
    projectDirectoryUrl: tempDirectoryUrl,
    ci: false,
  })
  // hook file must is kept
  const actual = await readFile(preCommitHookFileUrl)
  const expected = hookFileContent
  assert({ actual, expected })
  await ensureEmptyDirectory(tempDirectoryUrl)
}

// hook file and no hook script
{
  const packageJsonFileUrl = resolveUrl("package.json", tempDirectoryUrl)
  const preCommitHookFileUrl = resolveUrl(".git/hooks/pre-commit", tempDirectoryUrl)
  const hookFileContent = `#!/bin/sh`
  await writeFile(packageJsonFileUrl, JSON.stringify({}, null, "  "))
  await writeFile(preCommitHookFileUrl, hookFileContent)

  await installGitHooks({
    projectDirectoryUrl: tempDirectoryUrl,
    ci: false,
  })
  // hook file must be kept
  const actual = await readFile(preCommitHookFileUrl)
  const expected = hookFileContent
  assert({ actual, expected })
  await ensureEmptyDirectory(tempDirectoryUrl)
}
